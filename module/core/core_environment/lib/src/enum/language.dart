import 'package:collection/collection.dart';

enum Language {
  abkhazian(code: 'ab', name: 'Abkhazian'),
  afar(code: 'aa', name: 'Afar'),
  afrikaans(code: 'af', name: 'Afrikaans'),
  akan(code: 'ak', name: 'Akan'),
  albanian(code: 'sq', name: 'Albanian'),
  amharic(code: 'am', name: 'Amharic'),
  arabic(code: 'ar', name: 'Arabic'),
  aragonese(code: 'an', name: 'Aragonese'),
  armenian(code: 'hy', name: 'Armenian'),
  assamese(code: 'as', name: 'Assamese'),
  avaric(code: 'av', name: 'Avaric'),
  avestan(code: 'ae', name: 'Avestan'),
  aymara(code: 'ay', name: 'Aymara'),
  azerbaijani(code: 'az', name: 'Azerbaijani'),
  bambara(code: 'bm', name: 'Bambara'),
  bashkir(code: 'ba', name: 'Bashkir'),
  basque(code: 'eu', name: 'Basque'),
  belarusian(code: 'be', name: 'Belarusian'),
  bengali(code: 'bn', name: 'Bengali'),
  bihariLanguages(code: 'bh', name: 'Bihari Languages'),
  bislama(code: 'bi', name: 'Bislama'),
  norwegian(code: 'nb', name: 'Norwegian'),
  bosnian(code: 'bs', name: 'Bosnian'),
  breton(code: 'br', name: 'Breton'),
  bulgarian(code: 'bg', name: 'Bulgarian'),
  burmese(code: 'my', name: 'Burmese'),
  catalan(code: 'ca', name: 'Catalan'),
  centralKhmer(code: 'km', name: 'Central Khmer'),
  chamorro(code: 'ch', name: 'Chamorro'),
  chechen(code: 'ce', name: 'Chechen'),
  chewaNyanja(code: 'ny', name: 'Chewa (Nyanja)'),
  zhHans(code: 'zh_Hans', name: 'Chinese (Simplified)'),
  zhHant(code: 'zh_Hant', name: 'Chinese (Traditional)'),
  churchSlavonic(code: 'cu', name: 'Church Slavonic'),
  chuvash(code: 'cv', name: 'Chuvash'),
  cornish(code: 'kw', name: 'Cornish'),
  corsican(code: 'co', name: 'Corsican'),
  cree(code: 'cr', name: 'Cree'),
  croatian(code: 'hr', name: 'Croatian'),
  czech(code: 'cs', name: 'Czech'),
  danish(code: 'da', name: 'Danish'),
  dhivehi(code: 'dv', name: 'Dhivehi'),
  dutch(code: 'nl', name: 'Dutch'),
  dzongkha(code: 'dz', name: 'Dzongkha'),
  alpha2(code: 'alpha2', name: 'English (Alpha 2)'),
  english(code: 'en', name: 'English'),
  esperanto(code: 'eo', name: 'Esperanto'),
  estonian(code: 'et', name: 'Estonian'),
  ewe(code: 'ee', name: 'Ewe'),
  faroese(code: 'fo', name: 'Faroese'),
  fijian(code: 'fj', name: 'Fijian'),
  finnish(code: 'fi', name: 'Finnish'),
  french(code: 'fr', name: 'French'),
  fulah(code: 'ff', name: 'Fulah'),
  gaelic(code: 'gd', name: 'Gaelic'),
  galician(code: 'gl', name: 'Galician'),
  ganda(code: 'lg', name: 'Ganda'),
  georgian(code: 'ka', name: 'Georgian'),
  german(code: 'de', name: 'German'),
  greekModern1453(code: 'el', name: 'Greek, Modern (1453)'),
  guarani(code: 'gn', name: 'Guarani'),
  gujarati(code: 'gu', name: 'Gujarati'),
  haitian(code: 'ht', name: 'Haitian'),
  hausa(code: 'ha', name: 'Hausa'),
  hebrew(code: 'he', name: 'Hebrew'),
  herero(code: 'hz', name: 'Herero'),
  hindi(code: 'hi', name: 'Hindi'),
  hiriMotu(code: 'ho', name: 'Hiri Motu'),
  hungarian(code: 'hu', name: 'Hungarian'),
  icelandic(code: 'is', name: 'Icelandic'),
  ido(code: 'io', name: 'Ido'),
  igbo(code: 'ig', name: 'Igbo'),
  indonesia(code: 'id', name: 'Indonesian'),
  interlingua(code: 'ia', name: 'Interlingua'),
  interlingue(code: 'ie', name: 'Interlingue'),
  inuktitut(code: 'iu', name: 'Inuktitut'),
  inupiaq(code: 'ik', name: 'Inupiaq'),
  irish(code: 'ga', name: 'Irish'),
  italian(code: 'it', name: 'Italian'),
  japanese(code: 'ja', name: 'Japanese'),
  javanese(code: 'jv', name: 'Javanese'),
  kalaallisut(code: 'kl', name: 'Kalaallisut'),
  kannada(code: 'kn', name: 'Kannada'),
  kanuri(code: 'kr', name: 'Kanuri'),
  kashmiri(code: 'ks', name: 'Kashmiri'),
  kazakh(code: 'kk', name: 'Kazakh'),
  kikuyu(code: 'ki', name: 'Kikuyu'),
  kinyarwanda(code: 'rw', name: 'Kinyarwanda'),
  kirghiz(code: 'ky', name: 'Kirghiz'),
  komi(code: 'kv', name: 'Komi'),
  kongo(code: 'kg', name: 'Kongo'),
  korean(code: 'ko', name: 'Korean'),
  kuanyama(code: 'kj', name: 'Kuanyama'),
  kurdish(code: 'ku', name: 'Kurdish'),
  lao(code: 'lo', name: 'Lao'),
  latin(code: 'la', name: 'Latin'),
  latvian(code: 'lv', name: 'Latvian'),
  limburgan(code: 'li', name: 'Limburgan'),
  lingala(code: 'ln', name: 'Lingala'),
  lithuanian(code: 'lt', name: 'Lithuanian'),
  lubaKatanga(code: 'lu', name: 'Luba-Katanga'),
  luxembourgish(code: 'lb', name: 'Luxembourgish'),
  macedonian(code: 'mk', name: 'Macedonian'),
  malagasy(code: 'mg', name: 'Malagasy'),
  malay(code: 'ms', name: 'Malay'),
  malayalam(code: 'ml', name: 'Malayalam'),
  maltese(code: 'mt', name: 'Maltese'),
  manx(code: 'gv', name: 'Manx'),
  maori(code: 'mi', name: 'Maori'),
  marathi(code: 'mr', name: 'Marathi'),
  marshallese(code: 'mh', name: 'Marshallese'),
  mongolian(code: 'mn', name: 'Mongolian'),
  nauru(code: 'na', name: 'Nauru'),
  navajo(code: 'nv', name: 'Navajo'),
  ndebeleNorth(code: 'nd', name: 'Ndebele, North'),
  ndebeleSouth(code: 'nr', name: 'Ndebele, South'),
  ndonga(code: 'ng', name: 'Ndonga'),
  nepali(code: 'ne', name: 'Nepali'),
  northernSami(code: 'se', name: 'Northern Sami'),
  norwegianOther(code: 'no', name: 'Norwegian Other'),
  norwegianNynorsk(code: 'nn', name: 'Norwegian Nynorsk'),
  occitanPost1500(code: 'oc', name: 'Occitan (post 1500)'),
  ojibwa(code: 'oj', name: 'Ojibwa'),
  oriya(code: 'or', name: 'Oriya'),
  oromo(code: 'om', name: 'Oromo'),
  ossetian(code: 'os', name: 'Ossetian'),
  pali(code: 'pi', name: 'Pali'),
  panjabi(code: 'pa', name: 'Panjabi'),
  persian(code: 'fa', name: 'Persian'),
  polish(code: 'pl', name: 'Polish'),
  portuguese(code: 'pt', name: 'Portuguese'),
  pushto(code: 'ps', name: 'Pushto'),
  quechua(code: 'qu', name: 'Quechua'),
  romanian(code: 'ro', name: 'Romanian'),
  romansh(code: 'rm', name: 'Romansh'),
  rundi(code: 'rn', name: 'Rundi'),
  russian(code: 'ru', name: 'Russian'),
  samoan(code: 'sm', name: 'Samoan'),
  sango(code: 'sg', name: 'Sango'),
  sanskrit(code: 'sa', name: 'Sanskrit'),
  sardinian(code: 'sc', name: 'Sardinian'),
  serbian(code: 'sr', name: 'Serbian'),
  shona(code: 'sn', name: 'Shona'),
  sichuanYi(code: 'ii', name: 'Sichuan Yi'),
  sindhi(code: 'sd', name: 'Sindhi'),
  sinhala(code: 'si', name: 'Sinhala'),
  slovak(code: 'sk', name: 'Slovak'),
  slovenian(code: 'sl', name: 'Slovenian'),
  somali(code: 'so', name: 'Somali'),
  sothoSouthern(code: 'st', name: 'Sotho, Southern'),
  spanish(code: 'es', name: 'Spanish'),
  sundanese(code: 'su', name: 'Sundanese'),
  swahili(code: 'sw', name: 'Swahili'),
  swati(code: 'ss', name: 'Swati'),
  swedish(code: 'sv', name: 'Swedish'),
  tagalog(code: 'tl', name: 'Tagalog'),
  tahitian(code: 'ty', name: 'Tahitian'),
  tajik(code: 'tg', name: 'Tajik'),
  tamil(code: 'ta', name: 'Tamil'),
  tatar(code: 'tt', name: 'Tatar'),
  telugu(code: 'te', name: 'Telugu'),
  thai(code: 'th', name: 'Thai'),
  tibetan(code: 'bo', name: 'Tibetan'),
  tigrinya(code: 'ti', name: 'Tigrinya'),
  tongaIslands(code: 'to', name: 'Tonga (Tonga Islands)'),
  tsonga(code: 'ts', name: 'Tsonga'),
  tswana(code: 'tn', name: 'Tswana'),
  turkish(code: 'tr', name: 'Turkish'),
  turkmen(code: 'tk', name: 'Turkmen'),
  twi(code: 'tw', name: 'Twi'),
  uighur(code: 'ug', name: 'Uighur'),
  ukrainian(code: 'uk', name: 'Ukrainian'),
  urdu(code: 'ur', name: 'Urdu'),
  uzbek(code: 'uz', name: 'Uzbek'),
  venda(code: 've', name: 'Venda'),
  vietnamese(code: 'vi', name: 'Vietnamese'),
  volapuk(code: 'vo', name: 'Volapuk'),
  walloon(code: 'wa', name: 'Walloon'),
  welsh(code: 'cy', name: 'Welsh'),
  westernFrisian(code: 'fy', name: 'Western Frisian'),
  wolof(code: 'wo', name: 'Wolof'),
  xhosa(code: 'xh', name: 'Xhosa'),
  yiddish(code: 'yi', name: 'Yiddish'),
  yoruba(code: 'yo', name: 'Yoruba'),
  zhuang(code: 'za', name: 'Zhuang'),
  zulu(code: 'zu', name: 'Zulu');

  final String code;
  final String name;

  const Language({required this.code, required this.name});

  factory Language.fromCode(String? code) {
    return Language.values.firstWhere(
      (e) => e.code == code,
      orElse: () => Language.english,
    );
  }

  factory Language.fromName(String? name) {
    return Language.values.firstWhere(
      (e) => e.name == name,
      orElse: () => Language.english,
    );
  }

  static List<Language> get sorted =>
      values..sorted((a, b) => a.name.compareTo(b.name));
}
